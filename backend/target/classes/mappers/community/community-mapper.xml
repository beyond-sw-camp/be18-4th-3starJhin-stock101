<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.monstersinc.stock101.community.model.mapper.CommunityMapper">

    <sql id="selectPostSql">
        SELECT
            post_id,
            opinion,
            content,
            created_at,
            is_deleted,
            stock_id,
            user_id
        FROM posts
    </sql>

    <sql id="selectCommentSql">
        SELECT
            comment_id,
            post_id,
            user_id,
            content,
            parent_comment_id,
            created_at,
            is_deleted
        FROM comments
    </sql>


    <resultMap id="postResultMap" type="Post">
        <id     property="postId"   column="post_id" />
        <result property="opinion"  column="opinion" />
        <result property="content"  column="content" />
        <result property="createdAt" column="created_at" />
        <result property="stockId"  column="stock_id" />
        <result property="userId"   column="user_id" />
        <result property="userName"   column="userName" />
        <result property="likedByMe"   column="likedByMe"    />
        <result property="likeCount"   column="likeCount"    />
        <result property="commentCount" column="commentCount" />
        <result property="authorTierCode" column="authorTierCode"/>
        <result property="imageUrl" column="imageUrl"/>
    </resultMap>

    <resultMap id="commentResultMap" type="Comment">
        <id property="commentId" column="comment_id" />
        <result property="content" column="content"/>
        <result property="createdAt" column="created_at" />
        <result property="isDeleted" column="is_deleted"/>
        <result property="postId" column="post_id"/>
        <result property="userId" column="user_id"/>
        <result property="userName"   column="userName" />
        <result property="parentCommentId" column="parent_comment_id"/>
        <result property="authorTierCode" column="authorTierCode"/>
        <result property="totalCommentCount" column="totalCommentCount"/>
        <result property="imageUrl" column="imageUrl"/>
    </resultMap>

    <insert id="insertPost"
            useGeneratedKeys="true"
            keyProperty="post.postId">
        INSERT INTO posts (
        opinion, content, stock_id, user_id
        ) VALUES (
        #{post.opinion}, #{post.content}, #{post.stockId}, #{userId}
        )
    </insert>

    <select id="selectPostById" resultMap="postResultMap">
        SELECT
        p.*,

        -- 작성자 등급 / 이름
        u.tier_code AS authorTierCode,
        u.user_name  AS userName,
        u.image_url AS imageUrl,

        <!-- 내가 좋아요 눌렀는지 (로그인 안 했으면 0) -->
        <choose>
            <when test="userId != null">
                CASE WHEN EXISTS (
                SELECT 1
                FROM user_likes ul
                WHERE ul.post_id = p.post_id
                AND ul.user_id = #{userId}
                ) THEN 1 ELSE 0 END AS likedByMe,
            </when>
            <otherwise>
                0 AS likedByMe,
            </otherwise>
        </choose>

        <!-- 전체 좋아요 개수 -->
        (SELECT COUNT(*)
        FROM user_likes ul_all
        WHERE ul_all.post_id = p.post_id) AS likeCount,

        <!-- 전체 댓글 개수 -->
        (SELECT COUNT(*)
        FROM comments c
        WHERE c.post_id = p.post_id
        AND c.is_deleted = 0) AS commentCount

        FROM posts p
        LEFT JOIN users u
        ON u.user_id = p.user_id
        <where>
            p.post_id = #{postId}
            AND p.is_deleted = 0
        </where>
    </select>

    <select id="selectPostsByStockId" resultMap="postResultMap">
        SELECT
        p.post_id,
        p.opinion,
        p.content,
        p.user_id,
        p.created_at,

        -- 작성자 등급 / 이름
        u.tier_code AS authorTierCode,
        u.user_name  AS userName,
        u.image_url AS imageUrl,

        <!-- 내가 좋아요 눌렀는지 -->
        <choose>
            <when test="userId != null">
                CASE WHEN l.user_id IS NULL THEN 0 ELSE 1 END AS likedByMe,
            </when>
            <otherwise>
                0 AS likedByMe,
            </otherwise>
        </choose>

        -- 전체 좋아요 개수
        COUNT(DISTINCT l_all.user_id) AS likeCount,

        -- 전체 댓글 개수
        COUNT(DISTINCT c.comment_id) AS commentCount

        FROM posts p

        -- 작성자 정보
        LEFT JOIN users u
        ON u.user_id = p.user_id

        <!-- 내가 좋아요 눌렀는지 여부 -->
        <if test="userId != null">
            LEFT JOIN user_likes l
            ON l.post_id = p.post_id
            AND l.user_id = #{userId}
        </if>

        <!-- 전체 좋아요 개수 -->
        LEFT JOIN user_likes l_all
        ON l_all.post_id = p.post_id

        <!-- 전체 댓글 개수 -->
        LEFT JOIN comments c
        ON c.post_id = p.post_id
        AND c.is_deleted = 0

        WHERE p.stock_id = #{stockId}
        AND p.is_deleted = 0

        GROUP BY
        p.post_id, p.opinion, p.content, p.user_id, p.created_at,
        u.tier_code, u.user_name

        ORDER BY p.created_at DESC
    </select>


    <update id="softDeletePost" parameterType="long">
        UPDATE posts
        SET is_deleted = 1
        WHERE post_id = #{postId}
    </update>

    <select id="isLiked" parameterType="map" resultType="_int">
        SELECT COUNT(*)
        FROM user_likes
        <where>
            post_id = #{postId} AND user_id = #{userId}
        </where>
    </select>

    <insert id="insertLike" parameterType="map">
        INSERT INTO user_likes (post_id, user_id)
        VALUES (#{postId}, #{userId})
    </insert>

    <delete id="deleteLike" parameterType="map">
        DELETE FROM user_likes
        WHERE post_id = #{postId}
          AND user_id = #{userId}
    </delete>

    <select id="selectCommentListByPostId" parameterType="long" resultMap="commentResultMap">
        SELECT t.*,
            u.tier_code AS authorTierCode,
            u.user_name  AS userName,
            u.image_url AS imageUrl

        FROM (
            <include refid="selectCommentSql"/>
            WHERE post_id = #{postId}
            AND is_deleted = 0
        ) t
        LEFT JOIN users u
            ON u.user_id = t.user_id

        LEFT JOIN comments p
            ON p.comment_id = COALESCE(t.parent_comment_id, t.comment_id)
        ORDER BY
            p.created_at DESC, -- 스레드(부모) 최신순
            CASE WHEN t.parent_comment_id IS NULL THEN 0 ELSE 1 END ASC,  -- 부모 먼저
            t.created_at DESC
    </select>

    <insert id="insertComment" parameterType="Comment" useGeneratedKeys="true" keyProperty="commentId">
        INSERT INTO comments
        <trim prefix="(" suffix=")" suffixOverrides=",">
            content,
            user_id,
            post_id,
            <if test="parentCommentId != null">parent_comment_id,</if>
        </trim>
        <trim prefix="VALUES (" suffix=")" suffixOverrides=",">
            #{content},
            #{userId},
            #{postId},
            <if test="parentCommentId != null">#{parentCommentId},</if>
        </trim>
    </insert>


    <select id="selectCommentById"
            resultMap="commentResultMap">
        SELECT
            t.*,
            u.tier_code AS authorTierCode,
            u.user_name  AS userName,
            u.image_url AS imageUrl,

            (
                SELECT COUNT(*)
                FROM comments c
                WHERE c.post_id = t.post_id
                AND c.is_deleted = 0
            ) AS totalCommentCount
        FROM (
            <include refid="selectCommentSql"/>
        ) t
        LEFT JOIN users u ON u.user_id = t.user_id
        WHERE t.comment_id = #{commentId}
            AND t.is_deleted = 0
    </select>

    <update id="softDeleteComment" parameterType="long">
        UPDATE comments
        SET is_deleted = 1
        WHERE comment_id = #{commentId}
    </update>

    <select id="selectPostByUserId" resultMap="postResultMap">
        SELECT
        p.post_id,
        p.opinion,
        p.content,
        p.user_id,
        p.created_at,

        -- 작성자 정보
        u.tier_code  AS authorTierCode,
        u.user_name  AS userName,
        u.image_url AS imageUrl,

        <!-- 내가 좋아요 눌렀는지 -->
        <choose>
            <when test="userId != null">
                CASE WHEN l.user_id IS NULL THEN 0 ELSE 1 END AS likedByMe,
            </when>
            <otherwise>
                0 AS likedByMe,
            </otherwise>
        </choose>

        -- 전체 좋아요 개수
        COUNT(DISTINCT l_all.user_id) AS likeCount,

        -- 전체 댓글 개수
        COUNT(DISTINCT c.comment_id)  AS commentCount

        FROM posts p

        -- 작성자 정보
        LEFT JOIN users u
        ON u.user_id = p.user_id

        <!-- 내가 좋아요 눌렀는지 여부 -->
        <if test="userId != null">
            LEFT JOIN user_likes l
            ON l.post_id = p.post_id
            AND l.user_id = #{userId}
        </if>

        <!-- 전체 좋아요 개수 -->
        LEFT JOIN user_likes l_all
        ON l_all.post_id = p.post_id

        <!-- 전체 댓글 개수 -->
        LEFT JOIN comments c
        ON c.post_id = p.post_id
        AND c.is_deleted = 0

        WHERE p.user_id = #{writerId}
        AND p.is_deleted = 0

        GROUP BY
        p.post_id, p.opinion, p.content, p.user_id, p.created_at,
        u.tier_code, u.user_name

        ORDER BY p.created_at DESC
    </select>

    <select id="selectLikeAndCommentCount" parameterType="long" resultType="map">
        SELECT
            COUNT(DISTINCT l.user_id) AS likeCount,
            COUNT(DISTINCT c.comment_id) AS commentCount
        FROM posts p
                 LEFT JOIN user_likes l ON l.post_id = p.post_id
                 LEFT JOIN comments c   ON c.post_id = p.post_id AND c.is_deleted = 0
        WHERE p.post_id = #{postId}
    </select>

</mapper>