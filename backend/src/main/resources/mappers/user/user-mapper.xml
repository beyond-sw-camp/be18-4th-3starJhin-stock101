<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.monstersinc.stock101.user.model.mapper.UserMapper">

    <resultMap id="userResultMap" type="User">
        <id property="userId" column="user_id"/>
        <result property="email" column="email"/>
        <result property="name" column="user_name"/>
        <result property="password" column="password"/>
        <result property="createdAt" column="created_at"/>
        <result property="deletedAt" column="deleted_at"/>
        <result property="lastLoginAt" column="last_login_at"/>
        <result property="role" column="role"/>
        <result property="tierCode" column="tier_code"/>
        <result property="statusMessage" column="status_Message"/>
        <result property="imageUrl" column="image_url"/>
    </resultMap>

    <resultMap id="userProfileResultMap" type="UserProfile">
        <id property="userId" column="user_id"/>
        <result property="email" column="email"/>
        <result property="name" column="user_name"/>
        <result property="tierCode" column="tier_code"/>
        <result property="statusMessage" column="status_Message"/>
        <result property="imageUrl" column="image_url"/>
    </resultMap>

    <insert id="insertUser" parameterType="com.monstersinc.stock101.user.model.vo.User" useGeneratedKeys="true" keyProperty="userId">
        INSERT INTO users (email,user_name,password)
        VALUES (#{email},#{name},#{password});
    </insert>

    <select id="getUserProfileById" parameterType="Long" resultMap="userProfileResultMap">
        SELECT u.user_id,
               email,
               user_name,
               tier_code,
               status_message,
                image_url
        FROM users u
        WHERE u.user_id = #{userId};
    </select>

    <select id="findByEmail" parameterType="string" resultMap="userResultMap">
        SELECT u.user_id,
               user_name,
               email,
               password,
               created_at,
               last_login_at,
               deleted_at,
               role,
               tier_code,
               status_message
        FROM users u
        WHERE email = #{email};
    </select>

    <select id="findByUserId" parameterType="Long" resultMap="userResultMap">
        SELECT u.user_id,
               user_name,
               email,
               password,
               created_at,
               last_login_at,
               deleted_at,
               role,
               tier_code,
               status_message
        FROM users u
        WHERE u.user_id = #{userId};
    </select>

    <select id="existsByEmail" parameterType="string" resultType="boolean">
        SELECT COUNT(*) > 0 FROM users WHERE email = #{email}
    </select>

    <select id="existsByUserId" parameterType="long" resultType="boolean">
        SELECT COUNT(*) > 0 FROM users WHERE user_id = #{userId}
    </select>

    <update id="updateUserProfile">
        UPDATE users
        SET
            user_name = #{name},
            status_message = #{statusMessage}
        WHERE
            user_id = #{userId}
    </update>

    <update id="updateEmail">
        UPDATE users
        SET
            email = #{email}
        WHERE
            user_id = #{userId}
    </update>

    <select id="selectBestPredictors" resultMap="userResultMap">
    SELECT u.*
    FROM users u
    JOIN tiers t ON u.tier_code = t.tier_code
    WHERE t.weight BETWEEN 1 AND 5
    ORDER BY t.weight DESC, u.last_login_at DESC
    LIMIT 4;
    </select>


</mapper>