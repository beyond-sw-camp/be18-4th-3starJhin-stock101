pipeline {
    agent {
        kubernetes {
            yaml '''
            apiVersion: v1
            kind: Pod
            metadata:
              name: jenkins-agent
            spec:
              containers:
              - name: node
                image: node:20-alpine
                command:
                - cat
                tty: true
              - name: docker
                image: docker:28.5.1-cli-alpine3.22
                command:
                - cat
                tty: true
                volumeMounts:
                - mountPath: "/var/run/docker.sock"
                  name: docker-socket
              volumes:
              - name: docker-socket
                hostPath:
                  path: "/var/run/docker.sock"
            '''
        }
    }

    environment {
        DOCKER_IMAGE_NAME = 'iiijong/frontend'
        DOCKER_CREDENTIALS_ID = 'dockerhub-access'
        DISCORD_WEBHOOK_CREDENTIALS_ID = 'discord-webhook'
    }

    stages {

        stage('의존성 설치 및 빌드') {
            steps {
                container('node') {
                    dir('frontend') {
                        sh '''
                            echo "의존성 설치 중..."
                            npm install
                            echo "Vue 프로젝트 빌드 시작..."
                            npm run build
                            echo "빌드 완료! dist 디렉터리 내용:"
                            ls -al dist
                        '''
                    }
                }
            }
        }

        stage('도커 이미지 빌드 및 푸시') {
            steps {
                container('docker') {
                    dir('frontend') {
                        script {
                            def buildNumber = "${env.BUILD_NUMBER}"

                            withCredentials([usernamePassword(
                                credentialsId: DOCKER_CREDENTIALS_ID,
                                usernameVariable: 'DOCKER_USERNAME',
                                passwordVariable: 'DOCKER_PASSWORD'
                            )]) {
                                sh '''
                                    echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
                                '''
                            }

                            sh """
                                echo "도커 이미지 빌드 시작..."
                                docker build --no-cache -t $DOCKER_IMAGE_NAME:$buildNumber .
                                docker push $DOCKER_IMAGE_NAME:$buildNumber

                                echo "latest 태그로 갱신..."
                                docker tag $DOCKER_IMAGE_NAME:$buildNumber $DOCKER_IMAGE_NAME:latest
                                docker push $DOCKER_IMAGE_NAME:latest

                                echo "이미지 푸시 완료: $DOCKER_IMAGE_NAME:$buildNumber"
                            """
                        }
                    }
                }
            }
        }

        stage('GitOps Job 트리거') {
            steps {
                script {
                    def buildNumber = "${env.BUILD_NUMBER}"

                    // frontend-gitops 잡 호출
                    build job: 'frontend-gitops',
                        parameters: [
                            string(name: 'IMAGE_TAG', value: buildNumber)
                        ],
                        wait: true
                }
            }
        }
    }

    post {
        always {
            withCredentials([string(
                credentialsId: DISCORD_WEBHOOK_CREDENTIALS_ID,
                variable: 'DISCORD_WEBHOOK_URL'
            )]) {
                discordSend description: """
                프론트엔드 CI 빌드 결과

                작업명 : ${env.JOB_NAME}
                빌드번호 : #${env.BUILD_NUMBER}
                결과 : ${currentBuild.currentResult}
                실행시간 : ${currentBuild.duration / 1000}초
                """,
                result: currentBuild.currentResult,
                title: "Frontend Build Pipeline",
                webhookURL: "${DISCORD_WEBHOOK_URL}"
            }
        }
    }
}
